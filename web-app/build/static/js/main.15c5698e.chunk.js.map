{"version":3,"sources":["components/Preloader.js","App.js","index.js"],"names":["Preloader","react_default","a","createElement","className","App","_useState","useState","temperatureData","labels","datasets","humidityData","pressureData","sensorIp","_useState2","Object","slicedToArray","state","setState","chartOptions","scales","xAxes","type","time","unit","useEffect","socket","socketIOClient","on","data","parseData","close","dataSet","map","datum","Date","parse","date","sensorType","temperatures","temperature","humidities","humidity","pressures","pressure","label","fill","backgroundColor","borderColor","strokeColor","pointColor","pointStrokeColor","pointHighlightStroke","length","components_Preloader","onSubmit","event","preventDefault","sensorAddr","axios","post","payload","headers","Content-Type","responseType","then","res","catch","error","es","options","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.15c5698e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Preloader = () => (\n  <div className=\"row\">\n    <div className=\"preloader-wrapper big active\">\n      <div className=\"spinner-layer spinner-blue-only\">\n        <div className=\"circle-clipper left\">\n          <div className=\"circle\" />\n        </div>\n        <div className=\"gap-patch\">\n          <div className=\"circle\" />\n        </div>\n        <div className=\"circle-clipper right\">\n          <div className=\"circle\" />\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport default Preloader;\n","import React, { useState, useEffect } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nimport { Line as LineChart } from \"react-chartjs-2\";\nimport Preloader from \"./components/Preloader\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [state, setState] = useState({\n    temperatureData: { labels: [], datasets: [] },\n    humidityData: { labels: [], datasets: [] },\n    pressureData: { labels: [], datasets: [] },\n    sensorIp: \"\"\n  });\n\n  const chartOptions = {\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            unit: \"minute\"\n          }\n        }\n      ]\n    }\n  };\n\n  useEffect(() => {\n    const socket = socketIOClient(\"/\");\n    socket.on(\"FromAPI\", data => parseData(data));\n\n    return () => {\n      socket.close();\n    };\n  }, []);\n\n  const parseData = dataSet => {\n    const labels = dataSet.map(datum => Date.parse(datum.date));\n    const sensorIp = dataSet[0].sensorType;\n\n    const temperatures = dataSet.map(datum => datum.temperature);\n    const humidities = dataSet.map(datum => datum.humidity);\n    const pressures = dataSet.map(datum => datum.pressure);\n\n    const temperatureSet = {\n      label: \"Temperature Â°C\",\n      fill: false,\n      backgroundColor: \"red\",\n      borderColor: \"red\",\n      data: temperatures\n    };\n\n    const humiditySet = {\n      label: \"Relative humidity %\",\n      fill: false,\n      strokeColor: \"rgba(220,220,0,1)\",\n      pointColor: \"rgba(220,220,0,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightStroke: \"rgba(220,220,0,1)\",\n      data: humidities\n    };\n\n    const pressureSet = {\n      label: \"Air pressure hPa\",\n      fill: false,\n      strokeColor: \"rgba(220,0,220,1)\",\n      pointColor: \"rgba(220,0,220,1)\",\n      pointStrokeColor: \"#fff\",\n      pointHighlightStroke: \"rgba(220,0,220,1)\",\n      data: pressures\n    };\n\n    setState({\n      temperatureData: { labels: labels, datasets: [temperatureSet] },\n      humidityData: { labels: labels, datasets: [humiditySet] },\n      pressureData: { labels: labels, datasets: [pressureSet] },\n      sensorIp: sensorIp\n    });\n  };\n\n  const commandToggle = event => {\n    event.preventDefault();\n    const sensorAddr = \"http://\" + state.sensorIp;\n\n    axios\n      .post(\n        sensorAddr + \"/togglefan\",\n        { payload: \"\" },\n        {\n          headers: { \"Content-Type\": \"text/plain\" },\n          responseType: \"text\"\n        }\n      )\n      .then(res => res)\n      .catch(error => error);\n  };\n\n  return (\n    <div className=\"container\">\n      {state.temperatureData.datasets.length === 0 ? (\n        <Preloader />\n      ) : (\n        <div>\n          <div className=\"row\">\n            <div className=\"col s12 l6\">\n              <form onSubmit={commandToggle}>\n                <button type=\"submit\">Toggle fan</button>\n              </form>\n            </div>\n            <div className=\"col s12 l6\">\n              <LineChart data={state.temperatureData} options={chartOptions} />\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col s12 l6\">\n              <LineChart data={state.humidityData} options={chartOptions} />\n            </div>\n            <div className=\"col s12 l6\">\n              <LineChart data={state.pressureData} options={chartOptions} />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}